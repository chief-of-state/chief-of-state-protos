syntax = "proto3";

package chief_of_state.v1;

import "chief_of_state/v1/common.proto";

option csharp_namespace = "ChiefOfState.V1";
option go_package = "chief_of_state/v1;chiefofstatev1";
option java_multiple_files = true;
option java_outer_classname = "CosReadSideManagerProto";
option java_package = "com.github.chiefofstate.protobuf.v1";

// ReadSideManagerService helps manage some aspect of chiefofstate
// read sides offsets and state and others.
// NOTE: this service is mainly used by CoS and the https://github.com/chief-of-state/cos-cli
service ReadSideManagerService {
  // GetLatestOffset retrieves latest offset across all shards
  rpc GetLatestOffset(GetLatestOffsetRequest) returns (GetLatestOffsetResponse);
  // GetLatestOffsetByShard retrieves the latest offset given a shard
  rpc GetLatestOffsetByShard(GetLatestOffsetByShardRequest) returns (GetLatestOffsetByShardResponse);
  // RestartReadSide will clear the read side offset and start it over again
  // from the first offset and this across all shards
  rpc RestartReadSide(RestartReadSideRequest) returns (RestartReadSideResponse);
  // RestartReadSideByShard will clear the read side offset for the given shard and start it over again from the first offset
  rpc RestartReadSideByShard(RestartReadSideByShardRequest) returns (RestartReadSideByShardResponse);
  // PauseReadSide pauses a read side. This can be useful when running some data
  // migration and this across all shards
  rpc PauseReadSide(PauseReadSideRequest) returns (PauseReadSideResponse);
  // PauseReadSide pauses a read side. This can be useful when running some data
  // migration and this for a given shard
  rpc PauseReadSideByShard(PauseReadSideByShardRequest) returns (PauseReadSideByShardResponse);
  // ResumeReadSide resumes a paused read side and this across all shards
  rpc ResumeReadSide(ResumeReadSideRequest) returns (ResumeReadSideResponse);
  // ResumeReadSideByShard  resumes a paused read side for a given shard
  rpc ResumeReadSideByShard(ResumeReadSideByShardRequest) returns (ResumeReadSideByShardResponse);
  // SkippOffset skips the current offset to read across all shards and continue with next. The operation will automatically restart the read side.
  rpc SkipOffset(SkipOffsetRequest) returns (SkipOffsetResponse);
  // SkippOffset skips the current offset to read for a given shard and continue with next. The operation will automatically restart the read side.
  rpc SkipOffsetByShard(SkipOffsetByShardRequest) returns (SkipOffsetByShardResponse);
}

// GetReadSideLatestOffsetRequest helps retrieve the
// latest offset of a readside accross all shards
message GetLatestOffsetRequest {
  // the read side unique identifier
  string read_side_id = 1;
}

// GetReadSideLatestOffsetResponse is the response
// to GetLatestOffsetRequest
message GetLatestOffsetResponse {
  // the list of offset
  repeated ReadSideOffset offsets = 1;
}

// GetLatestOffsetByShardRequest helps retrieve the
// latest offset of a readside per shar
message GetLatestOffsetByShardRequest {
  // the read side unique identifier
  string read_side_id = 1;
  // the cluster shard number
  uint64 cluster_shard_number = 2;
}

// GetLatestOffsetByShardResponse is the response
// to GetLatestOffsetByShardRequest
message GetLatestOffsetByShardResponse {
  ReadSideOffset offsets = 1;
}

// RestartReadSideRequest helps restart a readside
// accross all shards
message RestartReadSideRequest {
  // the read side unique identifier
  string read_side_id = 1;
}

// RestartReadSideResponse is the response to
// RestartReadSideRequest
message RestartReadSideResponse {
  // states whether the restart was successful
  bool successful = 1;
}

// RestartReadSideByShardRequest helps restarts a readside
// for a given shard
message RestartReadSideByShardRequest {
  // the read side unique identifier
  string read_side_id = 1;
  // the cluster shard number
  uint64 cluster_shard_number = 2;
}

// RestartReadSideByShardResponse is the response to
// RestartReadSideByShardRequest
message RestartReadSideByShardResponse {
  // states whether the restart was successful
  bool successful = 1;
}

// PauseReadSideRequest helps pause a given readside
// accross all shards.
message PauseReadSideRequest {
  // the read side unique identifier
  string read_side_id = 1;
}

// PauseReadSideResponse is the response to PauseReadSideRequest
message PauseReadSideResponse {
  // states whether the pause request was successful
  bool successful = 1;
}

// PauseReadSideByShardRequest helps pause a given readside
// for a given shard
message PauseReadSideByShardRequest {
  // the read side unique identifier
  string read_side_id = 1;
  // the cluster shard number
  uint64 cluster_shard_number = 2;
}

// PauseReadSideByShardResponse is the response to PauseReadSideByShardRequest
message PauseReadSideByShardResponse {
  // states whether the pause request was successful
  bool successful = 1;
}

// ResumeReadSideRequest helps resume a paused readside
// accross all shards
message ResumeReadSideRequest {
  // the read side unique identifier
  string read_side_id = 1;
}

// ResumeReadSideResponse is the response to ResumeReadSideRequest
message ResumeReadSideResponse {
  // states whether the pause request was successful
  bool successful = 1;
}

// ResumeReadSideByShardRequest helps resume a pause readside for a particular shard
message ResumeReadSideByShardRequest {
  // the read side unique identifier
  string read_side_id = 1;
  // the cluster shard number
  uint64 cluster_shard_number = 2;
}

// ResumeReadSideByShardResponse is the response to ResumeReadSideByShardRequest
message ResumeReadSideByShardResponse {
  // states whether the pause request was successful
  bool successful = 1;
}

// SkipOffsetRequest helps skip the offset of a given readside
// accross all shards
message SkipOffsetRequest {
  // the read side unique identifier
  string read_side_id = 1;
}

// SkipOffsetResponse is the response to SkipOffsetRequest
message SkipOffsetResponse {
  // states whether the pause request was successful
  bool successful = 1;
}

// SkipOffsetByShardRequest helps skip the offset of given readside for a given shard.
message SkipOffsetByShardRequest {
  // the read side unique identifier
  string read_side_id = 1;
  // the cluster shard number
  uint64 cluster_shard_number = 2;
}

// SkipOffsetByShardResponse is the response to SkipOffsetByShardRequest
message SkipOffsetByShardResponse {
  // states whether the pause request was successful
  bool successful = 1;
}
